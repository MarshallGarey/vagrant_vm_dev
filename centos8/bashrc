# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

function setups
{
        SYSCONF=`pwd`
        export PATH=$SYSCONF/bin:$SYSCONF/sbin:$PATH
        export MANPATH=$SYSCONF/share/man:$MANPATH
	source ../slurm/contribs/slurm_completion_help/slurm_completion.sh
	export SLURM_CONF=$SYSCONF/etc/slurm.conf
	#source /opt/intel/intelmpi/bin/compilervars.sh -arch intel64 -platform linux
}

function chpwd()
{
	if [ -f ../slurm/contribs/slurm_completion_help/slurm_completion.sh ]
	then
		source ../slurm/contribs/slurm_completion_help/slurm_completion.sh
	fi
}

# Redefine the `cd` function so that I can do custom things upon changing a
# directory (like sourcing variables).
# See:
#
# https://stackoverflow.com/questions/3276247/is-there-a-hook-in-bash-to-find-out-when-the-cwd-changes
# https://unix.stackexchange.com/questions/21363/execute-bash-scripts-on-entering-a-directory
# https://unix.stackexchange.com/questions/683589/automatically-source-a-file-when-cd-into-a-specific-directory
function cd()
{
    builtin cd $@
    chpwd
}
# On opening a new terminal, cd to the current directory to run the custom
# cd function
cd .

# ccache
export PATH=/lib64/ccache:$PATH

# Path to OpenMPI (includes things like mpicc and mpirun)
export PATH=/home/marshall/openmpi/install/bin:$PATH
# Path to PMIX v3
export PATH=/home/marshall/pmix/install_3.2/bin:$PATH

#alias makepy='date && time make.py'
function makepy()
{
	date
	time make.py $@
}

alias makeit="make -j install>/dev/null"
alias maketags="find . -name \*.c -o -name \*.h -o -name slurm.h.in > cscope.files && ctags-exuberant -R && ctags -R --language-force=Tcl --append=yes testsuite/expect/* && cscope -i cscope.files -b"
# maketags2 excludes Slurm-specific testsuite stuff. It can be used for any
# directory I create that is just .c and .h files.
alias maketags2='find . -name \*.c -o -name \*.h > cscope.files && ctags-exuberant -R && cscope -i cscope.files -b'
alias drainednodes="sinfo --state=drain --noheader --Format=nodelist"

# Hook direnv to the shell (https://direnv.net/docs/hook.html)
eval "$(direnv hook bash)"

# From Marcin (Michael added the grep):
alias get_log_errors="grep 'error: ' slurmCtld.log-20200426 | sed 's/.*error: \(.*\)/\1/g' | sed 's/[0-9]\+//g' | sort | uniq -c | sort -n -r"

# From Nate:
alias get_log_hist='cut -d " " -f 1 --complement /dev/stdin | sed '\''s#[0-9]#.#g'\'' |grep . |sort |uniq -c|sort -nk1'

# Attach a timestamp to commands
export HISTTIMEFORMAT="%y-%m-%d %T "

# Make less more :)
# See https://stackoverflow.com/questions/16828/how-do-you-do-a-case-insensitive-search-using-a-pattern-modifier-using-less/26069#26069
# -R Maintains ANSI color sequences.
# -I sets case-insensitive searches.
# Start less with +F (or press SHIFT+F while in less) to cause it to follow the
# file I've opened - very useful for following logs. This is a nice alternative
# to tail -f.
export LESS=-RI

